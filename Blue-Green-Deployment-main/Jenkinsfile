pipeline {
    agent any
    
    tools {
      maven 'maven3'
    }
    
     parameters {
        choice(name: 'DEPLOY_ENV', choices: ['blue', 'green'], description: 'Choose which environment to deploy: Blue or Green')
        // choice(name: 'DOCKER_TAG', choices: ['blue', 'green'], description: 'Choose the Docker image tag for the deployment')
        booleanParam(name: 'SWITCH_TRAFFIC', defaultValue: false, description: 'Switch traffic between Blue and Green')
    }
    
    environment {
        IMAGE_NAME = "sundersara/bankapp"
        TAG = "${params.DOCKER_TAG}" 
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('Git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/sundersara2712/ders.git'
            }
        }
        stage('Compile') {
            steps {
              sh "mvn -f ./Blue-Green-Deployment-main/pom.xml compile"
            }
        }
        stage('Test') {
            steps {
              sh "mvn -f ./Blue-Green-Deployment-main/pom.xml  test -DskipTests=true"
            }
        }
        stage('Trivy') {
            steps {
                sh "trivy fs --format table -o fs.html ."
            }
        }
        stage('Sonarqubee') {
            steps {
              withSonarQubeEnv('sonar') {
                                sh '''
                                $SCANNER_HOME/bin/sonar-scanner \
                                -Dsonar.projectKey=multitier \
                                -Dsonar.projectName=multitier \
                                -Dsonar.language=java \
                                -Dsonar.java.binaries=**/target \
                                '''
              }
            }

        }
        
        
        stage('Quality') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false
                 }
            }
        }
        
        stage('Buildins') {
            steps {
                sh "mvn -f ./Blue-Green-Deployment-main/pom.xml package -DskipTests=true"
            }
        }
        stage('Nexus artifact') {
            steps {
              withMaven(globalMavenSettingsConfig: 'maven-settings', maven: 'maven3') {
                      sh "mvn -f ./Blue-Green-Deployment-main/pom.xml deploy -DskipTests=true"
              }
            }
        }
        
        stage('Docker Build'){
            steps{
                sh 'docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} -f ./Blue-Green-Deployment-main/Dockerfile ./Blue-Green-Deployment-main'
            }
        }
         stage('Trivy scan ') {
            steps {
                sh "trivy image  --format table -o fs.html ${IMAGE_NAME}:${BUILD_NUMBER}"
            }
          }
        stage('docker push ') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-hub') {
                          sh "docker push  ${IMAGE_NAME}:${BUILD_NUMBER}"
                  }
                }
                
            }
        }
        // stage('Deploy MySQL Deployment and Service') {
        //     steps {
        //         script {
        //             withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://CFB22CA70BF8CF6D26E68FCFFEB3A262.gr7.ap-south-1.eks.amazonaws.com') {
        //                 sh "kubectl apply -f mysql-ds.yml -n ${KUBE_NAMESPACE}"  // Ensure you have the MySQL deployment YAML ready
        //             }
        //         }
        //     }
        // }
        //         stage('Deploy SVC-APP') {
        //     steps {
        //         script {
        //             withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://CFB22CA70BF8CF6D26E68FCFFEB3A262.gr7.ap-south-1.eks.amazonaws.com') {
        //                 sh """ if ! kubectl get svc bankapp-service -n ${KUBE_NAMESPACE}; then
        //                         kubectl apply -f bankapp-service.yml -n ${KUBE_NAMESPACE}
        //                       fi
        //                 """
        //           }
        //         }
        //     }
        // }
        // stage('Deploy to Kubernetes') {
        //     steps {
        //         script {
        //             def deploymentFile = ""
        //             if (params.DEPLOY_ENV == 'blue') {
        //                 deploymentFile = 'app-deployment-blue.yml'
        //             } else {
        //                 deploymentFile = 'app-deployment-green.yml'
        //             }

        //             withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://CFB22CA70BF8CF6D26E68FCFFEB3A262.gr7.ap-south-1.eks.amazonaws.com') {
        //                 sh "kubectl apply -f ${deploymentFile} -n ${KUBE_NAMESPACE}"
        //             }
        //         }
        //     }
        // }
        // stage('Switch Traffic Between Blue & Green Environment') {
        //     when {
        //         expression { return params.SWITCH_TRAFFIC }
        //     }
        //     steps {
        //         script {
        //             def newEnv = params.DEPLOY_ENV

        //             // Always switch traffic based on DEPLOY_ENV
        //             withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://CFB22CA70BF8CF6D26E68FCFFEB3A262.gr7.ap-south-1.eks.amazonaws.com') {
        //                 sh '''
        //                     kubectl patch service bankapp-service -p "{\\"spec\\": {\\"selector\\": {\\"app\\": \\"bankapp\\", \\"version\\": \\"''' + newEnv + '''\\"}}}" -n ${KUBE_NAMESPACE}
        //                 '''
        //             }
        //             echo "Traffic has been switched to the ${newEnv} environment."
        //         }
        //     }
        // }
        // stage('Verify Deployment') {
        //     steps {
        //         script {
        //             def verifyEnv = params.DEPLOY_ENV
        //             withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://CFB22CA70BF8CF6D26E68FCFFEB3A262.gr7.ap-south-1.eks.amazonaws.com') {
        //                 sh """
        //                 kubectl get pods -l version=${verifyEnv} -n ${KUBE_NAMESPACE}
        //                 kubectl get svc bankapp-service -n ${KUBE_NAMESPACE}
        //                 """
        //             }
        //         }
        //     }
        // }

       
    }
}
